{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1524411533120},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524410852123},{"name":"../environment","loc":{"line":13,"column":28}},{"name":"../globals","loc":{"line":14,"column":24}},{"name":"../ops/ops","loc":{"line":15,"column":20}},{"name":"./sgd_optimizer","loc":{"line":16,"column":30}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar globals_1 = require(\"../globals\");\nvar ops_1 = require(\"../ops/ops\");\nvar sgd_optimizer_1 = require(\"./sgd_optimizer\");\nvar MomentumOptimizer = (function (_super) {\n    __extends(MomentumOptimizer, _super);\n    function MomentumOptimizer(learningRate, momentum, useNesterov) {\n        if (useNesterov === void 0) { useNesterov = false; }\n        var _this = _super.call(this, learningRate) || this;\n        _this.learningRate = learningRate;\n        _this.momentum = momentum;\n        _this.useNesterov = useNesterov;\n        _this.m = ops_1.scalar(_this.momentum);\n        _this.accumulations = {};\n        return _this;\n    }\n    MomentumOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulations[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulations[variableName] =\n                        ops_1.zerosLike(value).variable(trainable_1);\n                });\n            }\n            var accumulation = this_1.accumulations[variableName];\n            var gradient = variableGradients[variableName];\n            globals_1.tidy(function () {\n                var newValue;\n                var newAccumulation = _this.m.mul(accumulation).add(gradient);\n                if (_this.useNesterov) {\n                    newValue =\n                        _this.c.mul(gradient.add(newAccumulation.mul(_this.m))).add(value);\n                }\n                else {\n                    newValue = _this.c.mul(newAccumulation).add(value);\n                }\n                _this.accumulations[variableName].assign(newAccumulation);\n                value.assign(newValue);\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    MomentumOptimizer.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        this.m.dispose();\n        if (this.accumulations != null) {\n            for (var variableName in this.accumulations) {\n                this.accumulations[variableName].dispose();\n            }\n        }\n    };\n    MomentumOptimizer.prototype.setMomentum = function (momentum) {\n        this.momentum = momentum;\n    };\n    return MomentumOptimizer;\n}(sgd_optimizer_1.SGDOptimizer));\nexports.MomentumOptimizer = MomentumOptimizer;\n","map":{"version":3,"file":"momentum_optimizer.js","sourceRoot":"","sources":["../src/optimizers/momentum_optimizer.ts"],"names":[],"mappings":";;;;;;;;;;;;AAiBA,8CAAmC;AACnC,sCAAgC;AAChC,kCAA6C;AAG7C,iDAA6C;AAG7C;IAAuC,qCAAY;IAIjD,2BACc,YAAoB,EAAU,QAAgB,EAChD,WAAmB;QAAnB,4BAAA,EAAA,mBAAmB;QAF/B,YAGE,kBAAM,YAAY,CAAC,SAGpB;QALa,kBAAY,GAAZ,YAAY,CAAQ;QAAU,cAAQ,GAAR,QAAQ,CAAQ;QAChD,iBAAW,GAAX,WAAW,CAAQ;QAE7B,KAAI,CAAC,CAAC,GAAG,YAAM,CAAC,KAAI,CAAC,QAAQ,CAAC,CAAC;QAC/B,KAAI,CAAC,aAAa,GAAG,EAAE,CAAC;;IAC1B,CAAC;IAED,0CAAc,GAAd,UAAe,iBAAmC;QAAlD,iBA2BC;gCA1BY,YAAY;YACrB,IAAM,KAAK,GAAG,iBAAG,CAAC,MAAM,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;YAC3D,IAAI,OAAK,aAAa,CAAC,YAAY,CAAC,IAAI,IAAI,EAAE;gBAC5C,IAAM,WAAS,GAAG,KAAK,CAAC;gBACxB,cAAI,CAAC;oBACH,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC;wBAC5B,eAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,WAAS,CAAC,CAAC;gBAC3C,CAAC,CAAC,CAAC;aACJ;YAED,IAAM,YAAY,GAAG,OAAK,aAAa,CAAC,YAAY,CAAC,CAAC;YACtD,IAAM,QAAQ,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;YAEjD,cAAI,CAAC;gBACH,IAAI,QAAgB,CAAC;gBACrB,IAAM,eAAe,GAAG,KAAI,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC/D,IAAI,KAAI,CAAC,WAAW,EAAE;oBACpB,QAAQ;wBACJ,KAAI,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,KAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACtE;qBAAM;oBACL,QAAQ,GAAG,KAAI,CAAC,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACnD;gBACD,KAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;gBACzD,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC;;QAzBD,KAAK,IAAM,YAAY,IAAI,iBAAiB;oBAAjC,YAAY;SAyBtB;IACH,CAAC;IAED,mCAAO,GAAP;QACE,iBAAM,OAAO,WAAE,CAAC;QAChB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACjB,IAAI,IAAI,CAAC,aAAa,IAAI,IAAI,EAAE;YAC9B,KAAK,IAAM,YAAY,IAAI,IAAI,CAAC,aAAa,EAAE;gBAC7C,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;aAC5C;SACF;IACH,CAAC;IAOD,uCAAW,GAAX,UAAY,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IACH,wBAAC;AAAD,CAAC,AA3DD,CAAuC,4BAAY,GA2DlD;AA3DY,8CAAiB","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {tidy} from '../globals';\nimport {scalar, zerosLike} from '../ops/ops';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedVariableMap} from '../types';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  private m: Scalar;\n  private accumulations: NamedVariableMap;\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n    this.accumulations = {};\n  }\n\n  applyGradients(variableGradients: NamedVariableMap) {\n    for (const variableName in variableGradients) {\n      const value = ENV.engine.registeredVariables[variableName];\n      if (this.accumulations[variableName] == null) {\n        const trainable = false;\n        tidy(() => {\n          this.accumulations[variableName] =\n              zerosLike(value).variable(trainable);\n        });\n      }\n\n      const accumulation = this.accumulations[variableName];\n      const gradient = variableGradients[variableName];\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = this.m.mul(accumulation).add(gradient);\n        if (this.useNesterov) {\n          newValue =\n              this.c.mul(gradient.add(newAccumulation.mul(this.m))).add(value);\n        } else {\n          newValue = this.c.mul(newAccumulation).add(value);\n        }\n        this.accumulations[variableName].assign(newAccumulation);\n        value.assign(newValue);\n      });\n    }\n  }\n\n  dispose() {\n    super.dispose();\n    this.m.dispose();\n    if (this.accumulations != null) {\n      for (const variableName in this.accumulations) {\n        this.accumulations[variableName].dispose();\n      }\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n}\n"]}},"hash":"0e1e1011a1bbc8f0f9fd9f749810ab1a","cacheData":{"env":{}}}