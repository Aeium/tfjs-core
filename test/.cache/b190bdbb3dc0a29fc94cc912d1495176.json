{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1524411533120},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524410852123},{"name":"../environment","loc":{"line":13,"column":28}},{"name":"../globals","loc":{"line":14,"column":24}},{"name":"../ops/ops","loc":{"line":15,"column":20}},{"name":"./optimizer","loc":{"line":16,"column":26}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar globals_1 = require(\"../globals\");\nvar ops_1 = require(\"../ops/ops\");\nvar optimizer_1 = require(\"./optimizer\");\nvar RMSPropOptimizer = (function (_super) {\n    __extends(RMSPropOptimizer, _super);\n    function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {\n        if (decay === void 0) { decay = 0.9; }\n        if (momentum === void 0) { momentum = 0.0; }\n        if (epsilon === void 0) { epsilon = 1e-8; }\n        if (centered === void 0) { centered = false; }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedMeanSquares = {};\n        _this.accumulatedMeanGrads = {};\n        _this.accumulatedMoments = {};\n        _this.c = globals_1.keep(ops_1.scalar(learningRate));\n        _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));\n        _this.decay = globals_1.keep(ops_1.scalar(decay));\n        _this.momentum = globals_1.keep(ops_1.scalar(momentum));\n        _this.oneMinusDecay = globals_1.keep(ops_1.scalar(1 - decay));\n        _this.centered = centered;\n        return _this;\n    }\n    RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        var _loop_1 = function (variableName) {\n            var value = environment_1.ENV.engine.registeredVariables[variableName];\n            if (this_1.accumulatedMeanSquares[variableName] == null) {\n                var trainable_1 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedMeanSquares[variableName] =\n                        ops_1.zerosLike(value).variable(trainable_1);\n                });\n            }\n            if (this_1.accumulatedMeanGrads[variableName] == null && this_1.centered) {\n                var trainable_2 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedMeanGrads[variableName] =\n                        ops_1.zerosLike(value).variable(trainable_2);\n                });\n            }\n            if (this_1.accumulatedMoments[variableName] == null) {\n                var trainable_3 = false;\n                globals_1.tidy(function () {\n                    _this.accumulatedMoments[variableName] =\n                        ops_1.zerosLike(value).variable(trainable_3);\n                });\n            }\n            var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];\n            var accumulatedMeanGrad = this_1.accumulatedMeanGrads[variableName];\n            var accumulatedMoments = this_1.accumulatedMoments[variableName];\n            var gradient = variableGradients[variableName];\n            globals_1.tidy(function () {\n                var newAccumulatedMeanSquare = _this.decay.mul(accumulatedMeanSquare)\n                    .add(_this.oneMinusDecay.mul(gradient.square()));\n                if (_this.centered) {\n                    var newAccumulatedMeanGrad = _this.decay.mul(accumulatedMeanGrad)\n                        .add(_this.oneMinusDecay.mul(gradient));\n                    var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments)\n                        .add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this.epsilon)).sqrt()));\n                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);\n                    _this.accumulatedMeanGrads[variableName].assign(newAccumulatedMeanGrad);\n                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n                    var newValue = value.sub(newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n                else {\n                    var newAccumulatedMeanSquare_1 = _this.decay.mul(accumulatedMeanSquare)\n                        .add(_this.oneMinusDecay.mul(gradient.square()));\n                    var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments)\n                        .add(_this.c.mul(gradient).div(newAccumulatedMeanSquare_1.add(_this.epsilon).sqrt()));\n                    _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare_1);\n                    _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n                    var newValue = value.sub(newAccumulatedMoments);\n                    value.assign(newValue);\n                }\n            });\n        };\n        var this_1 = this;\n        for (var variableName in variableGradients) {\n            _loop_1(variableName);\n        }\n    };\n    RMSPropOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.epsilon.dispose();\n        this.decay.dispose();\n        this.momentum.dispose();\n        this.oneMinusDecay.dispose();\n        if (this.accumulatedMeanSquares != null) {\n            Object.keys(this.accumulatedMeanSquares)\n                .forEach(function (name) { return _this.accumulatedMeanSquares[name].dispose(); });\n        }\n        if (this.accumulatedMeanGrads != null && this.centered) {\n            Object.keys(this.accumulatedMeanGrads)\n                .forEach(function (name) { return _this.accumulatedMeanGrads[name].dispose(); });\n        }\n        if (this.accumulatedMoments != null) {\n            Object.keys(this.accumulatedMoments)\n                .forEach(function (name) { return _this.accumulatedMoments[name].dispose(); });\n        }\n    };\n    return RMSPropOptimizer;\n}(optimizer_1.Optimizer));\nexports.RMSPropOptimizer = RMSPropOptimizer;\n","map":{"version":3,"file":"rmsprop_optimizer.js","sourceRoot":"","sources":["../src/optimizers/rmsprop_optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {keep, tidy} from '../globals';\nimport {scalar, zerosLike} from '../ops/ops';\nimport {Scalar} from '../tensor';\nimport {NamedVariableMap} from '../types';\nimport {Optimizer} from './optimizer';\n\n/** @doclink Optimizer */\nexport class RMSPropOptimizer extends Optimizer {\n  private c: Scalar;\n  private epsilon: Scalar;\n  private decay: Scalar;\n  private momentum: Scalar;\n  private oneMinusDecay: Scalar;\n  private centered: boolean;\n\n  private accumulatedMeanSquares: NamedVariableMap = {};\n  private accumulatedMeanGrads: NamedVariableMap = {};\n  private accumulatedMoments: NamedVariableMap = {};\n\n  constructor(\n      protected learningRate: number, decay = 0.9, momentum = 0.0,\n      epsilon = 1e-8, centered = false) {\n    super();\n\n    this.c = keep(scalar(learningRate));\n    this.epsilon = keep(scalar(epsilon));\n    this.decay = keep(scalar(decay));\n    this.momentum = keep(scalar(momentum));\n    this.oneMinusDecay = keep(scalar(1 - decay));\n    this.centered = centered;\n  }\n\n  applyGradients(variableGradients: NamedVariableMap) {\n    for (const variableName in variableGradients) {\n      const value = ENV.engine.registeredVariables[variableName];\n      if (this.accumulatedMeanSquares[variableName] == null) {\n        const trainable = false;\n        tidy(() => {\n          this.accumulatedMeanSquares[variableName] =\n              zerosLike(value).variable(trainable);\n        });\n      }\n      if (this.accumulatedMeanGrads[variableName] == null && this.centered) {\n        const trainable = false;\n        tidy(() => {\n          this.accumulatedMeanGrads[variableName] =\n              zerosLike(value).variable(trainable);\n        });\n      }\n      if (this.accumulatedMoments[variableName] == null) {\n        const trainable = false;\n        tidy(() => {\n          this.accumulatedMoments[variableName] =\n              zerosLike(value).variable(trainable);\n        });\n      }\n\n      const accumulatedMeanSquare = this.accumulatedMeanSquares[variableName];\n      const accumulatedMeanGrad = this.accumulatedMeanGrads[variableName];\n      const accumulatedMoments = this.accumulatedMoments[variableName];\n      const gradient = variableGradients[variableName];\n\n      tidy(() => {\n        const newAccumulatedMeanSquare =\n            this.decay.mul(accumulatedMeanSquare)\n                .add(this.oneMinusDecay.mul(gradient.square()));\n\n        if (this.centered) {\n          // Centered gradient\n          const newAccumulatedMeanGrad =\n              this.decay.mul(accumulatedMeanGrad)\n                  .add(this.oneMinusDecay.mul(gradient));\n\n          const newAccumulatedMoments =\n              this.momentum.mul(accumulatedMoments)\n                  .add(this.c.mul(gradient).div(\n                      newAccumulatedMeanSquare.sub(\n                        newAccumulatedMeanGrad.square().add(\n                          this.epsilon)).sqrt()));\n\n          this.accumulatedMeanSquares[variableName].assign(\n              newAccumulatedMeanSquare);\n          this.accumulatedMeanGrads[variableName].assign(\n              newAccumulatedMeanGrad);\n          this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          // Plain gradient\n          const newAccumulatedMeanSquare =\n              this.decay.mul(accumulatedMeanSquare)\n                  .add(this.oneMinusDecay.mul(gradient.square()));\n\n          const newAccumulatedMoments =\n              this.momentum.mul(accumulatedMoments)\n                  .add(this.c.mul(gradient).div(\n                      newAccumulatedMeanSquare.add(this.epsilon).sqrt()));\n\n          this.accumulatedMeanSquares[variableName].assign(\n              newAccumulatedMeanSquare);\n          this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n\n          const newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    }\n  }\n\n  dispose() {\n    this.c.dispose();\n    this.epsilon.dispose();\n    this.decay.dispose();\n    this.momentum.dispose();\n    this.oneMinusDecay.dispose();\n    if (this.accumulatedMeanSquares != null) {\n      Object.keys(this.accumulatedMeanSquares)\n          .forEach(name => this.accumulatedMeanSquares[name].dispose());\n    }\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      Object.keys(this.accumulatedMeanGrads)\n          .forEach(name => this.accumulatedMeanGrads[name].dispose());\n    }\n    if (this.accumulatedMoments != null) {\n      Object.keys(this.accumulatedMoments)\n          .forEach(name => this.accumulatedMoments[name].dispose());\n    }\n  }\n}\n"]}},"hash":"3cc3294e803728da1f4c32547d2e805e","cacheData":{"env":{}}}