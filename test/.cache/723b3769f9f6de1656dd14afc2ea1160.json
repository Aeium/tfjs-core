{"dependencies":[{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16real/tfjs-core/test/package.json","includedInParent":true,"mtime":1524156395000},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16real/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524156663000},{"name":"/usr/local/google/home/nsthorat/deeplearnjs-clients/float16real/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524152197486}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TextureType;\n(function (TextureType) {\n    TextureType[TextureType[\"FLOAT\"] = 0] = \"FLOAT\";\n    TextureType[TextureType[\"UNSIGNED_BYTE\"] = 1] = \"UNSIGNED_BYTE\";\n})(TextureType = exports.TextureType || (exports.TextureType = {}));\nfunction getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns, rows];\n}\nexports.getUnpackedMatrixTextureShapeWidthHeight = getUnpackedMatrixTextureShapeWidthHeight;\nfunction getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n    return matrixSize * channelsPerTexture;\n}\nexports.getUnpackedArraySizeFromMatrixSize = getUnpackedArraySizeFromMatrixSize;\nfunction getColorMatrixTextureShapeWidthHeight(rows, columns) {\n    return [columns * 4, rows];\n}\nexports.getColorMatrixTextureShapeWidthHeight = getColorMatrixTextureShapeWidthHeight;\nfunction getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n    if (unpackedSize % channelsPerTexture !== 0) {\n        throw new Error(\"unpackedSize (\" + unpackedSize + \") must be a multiple of \" +\n            (\"\" + channelsPerTexture));\n    }\n    return unpackedSize / channelsPerTexture;\n}\nexports.getMatrixSizeFromUnpackedArraySize = getMatrixSizeFromUnpackedArraySize;\nfunction encodeMatrixToUnpackedArray(matrix, unpackedArray, channelsPerTexture) {\n    var requiredSize = getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);\n    if (unpackedArray.length < requiredSize) {\n        throw new Error(\"unpackedArray length (\" + unpackedArray.length + \") must be >= \" +\n            (\"\" + requiredSize));\n    }\n    var dst = 0;\n    for (var src = 0; src < matrix.length; ++src) {\n        unpackedArray[dst] = matrix[src];\n        dst += channelsPerTexture;\n    }\n}\nexports.encodeMatrixToUnpackedArray = encodeMatrixToUnpackedArray;\nexports.FLOAT_MAX = 20000;\nexports.FLOAT_MIN = -exports.FLOAT_MAX;\nvar FLOAT_RANGE = (exports.FLOAT_MAX - exports.FLOAT_MIN) / 255;\nvar FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];\nvar FLOAT_POWERS = [1, 255, 255 * 255];\nfunction encodeFloatArrayAsUint16Array(floatArray) {\n    var int32View = new Int32Array(floatArray.buffer);\n    var uint16View = new Uint16Array(floatArray.length);\n    for (var i = 0; i < floatArray.length; i++) {\n        var x = int32View[i];\n        var bits = (x >> 16) & 0x8000;\n        var m = (x >> 12) & 0x07ff;\n        var e = (x >> 23) & 0xff;\n        if (e < 103) {\n            uint16View[i] = bits;\n            continue;\n        }\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e === 255) ? 0 : 1) && (x & 0x007fffff);\n            uint16View[i] = bits;\n            continue;\n        }\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            uint16View[i] = bits;\n            continue;\n        }\n        bits |= ((e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        uint16View[i] = bits;\n    }\n    return uint16View;\n}\nexports.encodeFloatArrayAsUint16Array = encodeFloatArrayAsUint16Array;\nfunction decodeUint16ArrayAsFloatArray(uint16Array) {\n    console.log('decoding', uint16Array);\n    var int32View = new Int32Array(uint16Array);\n    for (var i = 0; i < uint16Array.length; i++) {\n        var hbits = uint16Array[i];\n        var mant = hbits & 0x03ff;\n        var exp = hbits & 0x7c00;\n        if (exp === 0x7c00) {\n            exp = 0x3fc00;\n        }\n        else if (exp !== 0) {\n            exp += 0x1c000;\n            if (mant === 0 && exp > 0x1c400) {\n                int32View[i] = (hbits & 0x8000) << 16 | exp << 13 | 0x3ff;\n                continue;\n            }\n        }\n        else if (mant !== 0) {\n            exp = 0x1c400;\n            do {\n                mant <<= 1;\n                exp -= 0x400;\n            } while ((mant & 0x400) === 0);\n            mant &= 0x3ff;\n        }\n        int32View[i] =\n            (hbits & 0x8000) << 16\n                | (exp | mant) << 13;\n    }\n    return new Float32Array(int32View.buffer);\n}\nexports.decodeUint16ArrayAsFloatArray = decodeUint16ArrayAsFloatArray;\nexports.BYTE_NAN_VALUE = 0;\nfunction encodeFloatArray2(floatArray) {\n    var uintArray = new Uint8Array(floatArray.length * 4);\n    var _loop_1 = function (i) {\n        var value = floatArray[i / 4];\n        if (isNaN(value)) {\n            uintArray[i] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 1] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 2] = exports.BYTE_NAN_VALUE;\n            uintArray[i + 3] = exports.BYTE_NAN_VALUE;\n            return \"continue\";\n        }\n        var normalizedValue = (value - exports.FLOAT_MIN) / FLOAT_RANGE;\n        var enc = FLOAT_POWERS.map(function (pow) { return pow * normalizedValue; });\n        var buckets = enc.map(function (value) { return Math.floor((value % 1) * 255); });\n        uintArray[i] = Math.floor(normalizedValue);\n        uintArray[i + 1] = buckets[0];\n        uintArray[i + 2] = buckets[1];\n        uintArray[i + 3] = buckets[2];\n    };\n    for (var i = 0; i < uintArray.length; i += 4) {\n        _loop_1(i);\n    }\n    return uintArray;\n}\nexports.encodeFloatArray2 = encodeFloatArray2;\nfunction decodeToFloatArray(uintArray) {\n    var floatArray = new Float32Array(uintArray.length / 4);\n    var _loop_2 = function (i) {\n        if (uintArray[i] === exports.BYTE_NAN_VALUE &&\n            uintArray[i + 1] === exports.BYTE_NAN_VALUE &&\n            uintArray[i + 2] === exports.BYTE_NAN_VALUE &&\n            uintArray[i + 3] === exports.BYTE_NAN_VALUE) {\n            floatArray[i / 4] = NaN;\n            return \"continue\";\n        }\n        var dot = 0;\n        FLOAT_DELTAS.forEach(function (delta, j) {\n            dot += delta * uintArray[i + j];\n        });\n        var value = dot * FLOAT_RANGE + exports.FLOAT_MIN;\n        floatArray[i / 4] = value;\n    };\n    for (var i = 0; i < uintArray.length; i += 4) {\n        _loop_2(i);\n    }\n    return floatArray;\n}\nexports.decodeToFloatArray = decodeToFloatArray;\nfunction decodeMatrixFromUnpackedArray(unpackedArray, matrix, channelsPerTexture) {\n    var requiredSize = getMatrixSizeFromUnpackedArraySize(unpackedArray.length, channelsPerTexture);\n    if (matrix.length < requiredSize) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var dst = 0;\n    for (var src = 0; src < unpackedArray.length; src += channelsPerTexture) {\n        matrix[dst++] = unpackedArray[src];\n    }\n}\nexports.decodeMatrixFromUnpackedArray = decodeMatrixFromUnpackedArray;\nfunction decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n    var requiredSize = unpackedArray.length * channels / 4;\n    if (matrix.length < requiredSize) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var dst = 0;\n    for (var src = 0; src < unpackedArray.length; src += 4) {\n        for (var c = 0; c < channels; c++) {\n            matrix[dst++] = unpackedArray[src + c];\n        }\n    }\n}\nexports.decodeMatrixFromUnpackedColorRGBAArray = decodeMatrixFromUnpackedColorRGBAArray;\nfunction getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n    return [Math.ceil(columns / 2), Math.ceil(rows / 2)];\n}\nexports.getPackedMatrixTextureShapeWidthHeight = getPackedMatrixTextureShapeWidthHeight;\nfunction getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), w = _a[0], h = _a[1];\n    return w * h * 4;\n}\nexports.getPackedRGBAArraySizeFromMatrixShape = getPackedRGBAArraySizeFromMatrixShape;\nfunction encodeMatrixToPackedRGBA(matrix, rows, columns, packedRGBA) {\n    var requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);\n    if (packedRGBA.length < requiredSize) {\n        throw new Error(\"packedRGBA length (\" + packedRGBA.length + \") must be >= \" + requiredSize);\n    }\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];\n    var oddWidth = (columns % 2) === 1;\n    var oddHeight = (rows % 2) === 1;\n    var widthInFullBlocks = Math.floor(columns / 2);\n    var heightInFullBlocks = Math.floor(rows / 2);\n    {\n        var dstStride = (oddWidth ? 4 : 0);\n        var oneRow = columns;\n        var dst = 0;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            var matrixSrcRow = (blockY * 2 * columns);\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n                var matrixSrcCol = blockX * 2;\n                var src = matrixSrcRow + matrixSrcCol;\n                packedRGBA[dst] = matrix[src];\n                packedRGBA[dst + 1] = matrix[src + 1];\n                packedRGBA[dst + 2] = matrix[src + oneRow];\n                packedRGBA[dst + 3] = matrix[src + oneRow + 1];\n                dst += 4;\n            }\n            dst += dstStride;\n        }\n    }\n    if (oddWidth) {\n        var src = columns - 1;\n        var dst = (textureWidth - 1) * 4;\n        var srcStride = 2 * columns;\n        var dstStride = textureWidth * 4;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            packedRGBA[dst] = matrix[src];\n            packedRGBA[dst + 2] = matrix[src + columns];\n            src += srcStride;\n            dst += dstStride;\n        }\n    }\n    if (oddHeight) {\n        var src = (rows - 1) * columns;\n        var dst = (textureHeight - 1) * textureWidth * 4;\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n            packedRGBA[dst++] = matrix[src++];\n            packedRGBA[dst++] = matrix[src++];\n            dst += 2;\n        }\n    }\n    if (oddWidth && oddHeight) {\n        packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];\n    }\n    return packedRGBA;\n}\nexports.encodeMatrixToPackedRGBA = encodeMatrixToPackedRGBA;\nfunction decodeMatrixFromPackedRGBA(packedRGBA, rows, columns, matrix) {\n    var requiredSize = rows * columns;\n    if (requiredSize < matrix.length) {\n        throw new Error(\"matrix length (\" + matrix.length + \") must be >= \" + requiredSize);\n    }\n    var oddWidth = (columns % 2) === 1;\n    var oddHeight = (rows % 2) === 1;\n    var widthInFullBlocks = Math.floor(columns / 2);\n    var heightInFullBlocks = Math.floor(rows / 2);\n    var _a = getPackedMatrixTextureShapeWidthHeight(rows, columns), textureWidth = _a[0], textureHeight = _a[1];\n    {\n        var srcStride = oddWidth ? 4 : 0;\n        var dstStride = columns + (oddWidth ? 1 : 0);\n        var src = 0;\n        var dstRow1 = 0;\n        var dstRow2 = columns;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n                matrix[dstRow1++] = packedRGBA[src++];\n                matrix[dstRow1++] = packedRGBA[src++];\n                matrix[dstRow2++] = packedRGBA[src++];\n                matrix[dstRow2++] = packedRGBA[src++];\n            }\n            src += srcStride;\n            dstRow1 += dstStride;\n            dstRow2 += dstStride;\n        }\n    }\n    if (oddWidth) {\n        var src = (textureWidth - 1) * 4;\n        var dst = columns - 1;\n        var srcStride = textureWidth * 4;\n        var dstStride = 2 * columns;\n        for (var blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n            matrix[dst] = packedRGBA[src];\n            matrix[dst + columns] = packedRGBA[src + 2];\n            src += srcStride;\n            dst += dstStride;\n        }\n    }\n    if (oddHeight) {\n        var src = (textureHeight - 1) * textureWidth * 4;\n        var dst = (rows - 1) * columns;\n        for (var blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n            matrix[dst++] = packedRGBA[src++];\n            matrix[dst++] = packedRGBA[src++];\n            src += 2;\n        }\n    }\n    if (oddWidth && oddHeight) {\n        matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];\n    }\n    return matrix;\n}\nexports.decodeMatrixFromPackedRGBA = decodeMatrixFromPackedRGBA;\n","map":{"version":3,"file":"tex_util.js","sourceRoot":"","sources":["../src/kernels/webgl/tex_util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataTypeMap} from '../../types';\n\nexport enum TextureType {\n  FLOAT,\n  UNSIGNED_BYTE\n}\n\nexport interface TextureData {\n  texture: WebGLTexture;\n  shape: number[];\n  /** [rows, columns] shape of the texture. */\n  texShape: [number, number];\n  dtype: DataType;\n  values: DataTypeMap[DataType];\n  texType: TextureType;\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport type TypedArray = Float32Array|Uint8Array;\n\nexport function encodeMatrixToUnpackedArray(\n    matrix: TypedArray|Uint16Array, unpackedArray: TypedArray|Uint16Array,\n    channelsPerTexture: number) {\n  const requiredSize =\n      getUnpackedArraySizeFromMatrixSize(matrix.length, channelsPerTexture);\n  if (unpackedArray.length < requiredSize) {\n    throw new Error(\n        `unpackedArray length (${unpackedArray.length}) must be >= ` +\n        `${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < matrix.length; ++src) {\n    unpackedArray[dst] = matrix[src];\n    dst += channelsPerTexture;\n  }\n}\n\nexport const FLOAT_MAX = 20000;\nexport const FLOAT_MIN = -FLOAT_MAX;\nconst FLOAT_RANGE = (FLOAT_MAX - FLOAT_MIN) / 255;\n\nconst FLOAT_DELTAS = [1, 1 / 255, 1 / (255 * 255), 1 / (255 * 255 * 255)];\nconst FLOAT_POWERS = [1, 255, 255 * 255];\n\nexport function encodeFloatArrayAsUint16Array(floatArray: Float32Array):\n    Uint16Array {\n  const int32View = new Int32Array(floatArray.buffer);\n  const uint16View = new Uint16Array(floatArray.length);\n  for (let i = 0; i < floatArray.length; i++) {\n    const x = int32View[i];\n\n    let bits = (x >> 16) & 0x8000; /* Get the sign */\n    let m = (x >> 12) & 0x07ff;    /* Keep one extra bit for rounding */\n    const e = (x >> 23) & 0xff;    /* Using int is faster here */\n\n    /* If zero, or denormal, or exponent underflows too much for a denormal\n     * half, return signed zero. */\n    if (e < 103) {\n      uint16View[i] = bits;\n      continue;\n    }\n\n    /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n    if (e > 142) {\n      bits |= 0x7c00;\n      /* If exponent was 0xff and one mantissa bit was set, it means NaN,\n       * not Inf, so make sure we set one mantissa bit too. */\n      bits |= ((e === 255) ? 0 : 1) && (x & 0x007fffff);\n      uint16View[i] = bits;\n      continue;\n    }\n\n    /* If exponent underflows but not too much, return a denormal */\n    if (e < 113) {\n      m |= 0x0800;\n      /* Extra rounding may overflow and set mantissa to 0 and exponent\n       * to 1, which is OK. */\n      bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n      uint16View[i] = bits;\n      continue;\n    }\n\n    bits |= ((e - 112) << 10) | (m >> 1);\n    /* Extra rounding. An overflow will set mantissa to 0 and increment\n     * the exponent, which is OK. */\n    bits += m & 1;\n    uint16View[i] = bits;\n  }\n  return uint16View;\n}\n\nexport function decodeUint16ArrayAsFloatArray(uint16Array: Uint16Array):\n    Float32Array {\n  console.log('decoding', uint16Array);\n  const int32View = new Int32Array(uint16Array);\n\n  for (let i = 0; i < uint16Array.length; i++) {\n    const hbits = uint16Array[i];\n\n    let mant = hbits & 0x03ff;            // 10 bits mantissa\n    let exp = hbits & 0x7c00;             // 5 bits exponent\n    if (exp === 0x7c00) {                 // NaN/Inf\n      exp = 0x3fc00;                      // -> NaN/Inf\n    } else if (exp !== 0) {               // normalized value\n      exp += 0x1c000;                     // exp - 15 + 127\n      if (mant === 0 && exp > 0x1c400) {  // smooth transition\n        int32View[i] = (hbits & 0x8000) << 16 | exp << 13 | 0x3ff;\n        continue;\n      }\n    } else if (mant !== 0) {  // && exp==0 -> subnormal\n      exp = 0x1c400;          // make it normal\n      do {\n        mant <<= 1;                    // mantissa * 2\n        exp -= 0x400;                  // decrease exp by 1\n      } while ((mant & 0x400) === 0);  // while not normal\n      mant &= 0x3ff;                   // discard subnormal bit\n    }                                  // else +/-0 -> +/-0\n    int32View[i] =                     // combine all parts\n        (hbits & 0x8000) << 16         // sign  << ( 31 - 15 )\n        | (exp | mant) << 13;          // value << ( 23 - 10 )\n  }\n\n  // console.log(floatArray);\n  return new Float32Array(int32View.buffer);\n\n  // return floatArray;\n}\n\nexport const BYTE_NAN_VALUE = 0;\nexport function encodeFloatArray2(floatArray: Float32Array): Uint8Array {\n  const uintArray = new Uint8Array(floatArray.length * 4);\n  for (let i = 0; i < uintArray.length; i += 4) {\n    const value = floatArray[i / 4];\n    if (isNaN(value)) {\n      uintArray[i] = BYTE_NAN_VALUE;\n      uintArray[i + 1] = BYTE_NAN_VALUE;\n      uintArray[i + 2] = BYTE_NAN_VALUE;\n      uintArray[i + 3] = BYTE_NAN_VALUE;\n      continue;\n    }\n\n    const normalizedValue = (value - FLOAT_MIN) / FLOAT_RANGE;\n    const enc = FLOAT_POWERS.map(pow => pow * normalizedValue);\n    const buckets = enc.map(value => Math.floor((value % 1) * 255));\n\n    uintArray[i] = Math.floor(normalizedValue);\n    uintArray[i + 1] = buckets[0];\n    uintArray[i + 2] = buckets[1];\n    uintArray[i + 3] = buckets[2];\n  }\n  return uintArray;\n}\n\nexport function decodeToFloatArray(uintArray: Uint8Array): Float32Array {\n  const floatArray = new Float32Array(uintArray.length / 4);\n  for (let i = 0; i < uintArray.length; i += 4) {\n    if (uintArray[i] === BYTE_NAN_VALUE &&\n        uintArray[i + 1] === BYTE_NAN_VALUE &&\n        uintArray[i + 2] === BYTE_NAN_VALUE &&\n        uintArray[i + 3] === BYTE_NAN_VALUE) {\n      floatArray[i / 4] = NaN;\n      continue;\n    }\n\n    let dot = 0;\n    FLOAT_DELTAS.forEach((delta, j) => {\n      dot += delta * uintArray[i + j];\n    });\n    const value = dot * FLOAT_RANGE + FLOAT_MIN;\n    floatArray[i / 4] = value;\n  }\n  return floatArray;\n}\n\nexport function decodeMatrixFromUnpackedArray(\n    unpackedArray: Float32Array, matrix: Float32Array,\n    channelsPerTexture: number) {\n  const requiredSize = getMatrixSizeFromUnpackedArraySize(\n      unpackedArray.length, channelsPerTexture);\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += channelsPerTexture) {\n    matrix[dst++] = unpackedArray[src];\n  }\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [Math.ceil(columns / 2), Math.ceil(rows / 2)];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport function encodeMatrixToPackedRGBA(\n    matrix: Float32Array, rows: number, columns: number,\n    packedRGBA: Float32Array) {\n  const requiredSize = getPackedRGBAArraySizeFromMatrixShape(rows, columns);\n  if (packedRGBA.length < requiredSize) {\n    throw new Error(\n        `packedRGBA length (${packedRGBA.length}) must be >= ${requiredSize}`);\n  }\n  /*\n    Unpacked matrix, row-major order in Float32Array[16]:  A B C D\n                                                           E F G H\n                                                           I J K L\n                                                           M N O P\n\n    Packed matrix, 2x2 RGBA32 texture (memory view):       ABEF CDGH IJMN KLOP\n\n    Packed matrix, 2x2 RGBA32 texture (matrix view):       AB|CD\n                                                           EF|GH\n                                                           --+--\n                                                           IJ|KL\n                                                           MN|OP\n   */\n  const [textureWidth, textureHeight] =\n      getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  const oddWidth = (columns % 2) === 1;\n  const oddHeight = (rows % 2) === 1;\n  const widthInFullBlocks = Math.floor(columns / 2);\n  const heightInFullBlocks = Math.floor(rows / 2);\n\n  // loop over full 2x2 blocks\n  {\n    const dstStride = (oddWidth ? 4 : 0);\n    const oneRow = columns;\n    let dst = 0;\n    for (let blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n      const matrixSrcRow = (blockY * 2 * columns);\n      for (let blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n        const matrixSrcCol = blockX * 2;\n        const src = matrixSrcRow + matrixSrcCol;\n        packedRGBA[dst] = matrix[src];\n        packedRGBA[dst + 1] = matrix[src + 1];\n        packedRGBA[dst + 2] = matrix[src + oneRow];\n        packedRGBA[dst + 3] = matrix[src + oneRow + 1];\n        dst += 4;\n      }\n      dst += dstStride;\n    }\n  }\n\n  // loop down final odd column\n  if (oddWidth) {\n    let src = columns - 1;\n    let dst = (textureWidth - 1) * 4;\n    const srcStride = 2 * columns;\n    const dstStride = textureWidth * 4;\n    for (let blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n      packedRGBA[dst] = matrix[src];\n      packedRGBA[dst + 2] = matrix[src + columns];\n      src += srcStride;\n      dst += dstStride;\n    }\n  }\n\n  // loop across final row\n  if (oddHeight) {\n    let src = (rows - 1) * columns;\n    let dst = (textureHeight - 1) * textureWidth * 4;\n    for (let blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n      packedRGBA[dst++] = matrix[src++];\n      packedRGBA[dst++] = matrix[src++];\n      dst += 2;\n    }\n  }\n\n  // fill in bottom-right texel\n  if (oddWidth && oddHeight) {\n    packedRGBA[packedRGBA.length - 4] = matrix[matrix.length - 1];\n  }\n\n  return packedRGBA;\n}\n\nexport function decodeMatrixFromPackedRGBA(\n    packedRGBA: Float32Array, rows: number, columns: number,\n    matrix: Float32Array): Float32Array {\n  const requiredSize = rows * columns;\n  if (requiredSize < matrix.length) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  const oddWidth = (columns % 2) === 1;\n  const oddHeight = (rows % 2) === 1;\n  const widthInFullBlocks = Math.floor(columns / 2);\n  const heightInFullBlocks = Math.floor(rows / 2);\n  const [textureWidth, textureHeight] =\n      getPackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  // loop over full 2x2 blocks\n  {\n    const srcStride = oddWidth ? 4 : 0;\n    const dstStride = columns + (oddWidth ? 1 : 0);\n    let src = 0;\n    let dstRow1 = 0;\n    let dstRow2 = columns;\n    for (let blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n      for (let blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n        matrix[dstRow1++] = packedRGBA[src++];\n        matrix[dstRow1++] = packedRGBA[src++];\n        matrix[dstRow2++] = packedRGBA[src++];\n        matrix[dstRow2++] = packedRGBA[src++];\n      }\n      src += srcStride;\n      dstRow1 += dstStride;\n      dstRow2 += dstStride;\n    }\n  }\n\n  // loop down final column\n  if (oddWidth) {\n    let src = (textureWidth - 1) * 4;\n    let dst = columns - 1;\n    const srcStride = textureWidth * 4;\n    const dstStride = 2 * columns;\n    for (let blockY = 0; blockY < heightInFullBlocks; ++blockY) {\n      matrix[dst] = packedRGBA[src];\n      matrix[dst + columns] = packedRGBA[src + 2];\n      src += srcStride;\n      dst += dstStride;\n    }\n  }\n\n  // loop across final row\n  if (oddHeight) {\n    let src = (textureHeight - 1) * textureWidth * 4;\n    let dst = (rows - 1) * columns;\n    for (let blockX = 0; blockX < widthInFullBlocks; ++blockX) {\n      matrix[dst++] = packedRGBA[src++];\n      matrix[dst++] = packedRGBA[src++];\n      src += 2;\n    }\n  }\n\n  // fill in bottom-right cell\n  if (oddWidth && oddHeight) {\n    matrix[matrix.length - 1] = packedRGBA[packedRGBA.length - 4];\n  }\n\n  return matrix;\n}\n"]}},"hash":"f3de3a454dfe66649f20c86060728916","cacheData":{"env":{}}}