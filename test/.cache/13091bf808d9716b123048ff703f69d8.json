{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1524411533120},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524410852123},{"name":"..","loc":{"line":3,"column":18}},{"name":"../ops/array_ops","loc":{"line":4,"column":26}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar __1 = require(\"..\");\nvar array_ops_1 = require(\"../ops/array_ops\");\nfunction castTensor(x, dtype, backend) {\n    if (!__1.util.hasEncodingLoss(x.dtype, dtype)) {\n        return __1.Tensor.make(x.shape, { dataId: x.dataId }, dtype);\n    }\n    if (dtype === 'int32') {\n        return backend.int(x);\n    }\n    else if (dtype === 'bool') {\n        return backend.notEqual(x, array_ops_1.ArrayOps.scalar(0, x.dtype));\n    }\n    else {\n        throw new Error(\"Error in Cast: unknown dtype argument (\" + dtype + \")\");\n    }\n}\nexports.castTensor = castTensor;\nfunction reshapeTensor(x, shape) {\n    return __1.Tensor.make(shape, { dataId: x.dataId }, x.dtype);\n}\nexports.reshapeTensor = reshapeTensor;\n","map":{"version":3,"file":"backend_util.js","sourceRoot":"","sources":["../src/kernels/backend_util.ts"],"names":[],"mappings":";;AAiBA,wBAAsC;AACtC,8CAA0C;AAI1C,oBACI,CAAI,EAAE,KAAe,EAAE,OAAsB;IAC/C,IAAI,CAAC,QAAI,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;QAGzC,OAAO,UAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAC,EAAE,KAAK,CAAM,CAAC;KAC7D;IACD,IAAI,KAAK,KAAK,OAAO,EAAE;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACvB;SAAM,IAAI,KAAK,KAAK,MAAM,EAAE;QAC3B,OAAO,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,oBAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAM,CAAC;KAC9D;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,4CAA0C,KAAK,MAAG,CAAC,CAAC;KACrE;AACH,CAAC;AAdD,gCAcC;AAED,uBACI,CAAI,EAAE,KAAkB;IAC1B,OAAO,UAAM,CAAC,IAAI,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACzD,CAAC;AAHD,sCAGC","sourcesContent":["/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, util} from '..';\nimport {ArrayOps} from '../ops/array_ops';\nimport {DataType, ShapeMap} from '../types';\nimport {KernelBackend} from './backend';\n\nexport function castTensor<T extends Tensor<Rank>>(\n    x: T, dtype: DataType, backend: KernelBackend): T {\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    return Tensor.make(x.shape, {dataId: x.dataId}, dtype) as T;\n  }\n  if (dtype === 'int32') {\n    return backend.int(x);\n  } else if (dtype === 'bool') {\n    return backend.notEqual(x, ArrayOps.scalar(0, x.dtype)) as T;\n  } else {\n    throw new Error(`Error in Cast: unknown dtype argument (${dtype})`);\n  }\n}\n\nexport function reshapeTensor<T extends Tensor<Rank>, R extends Rank>(\n    x: T, shape: ShapeMap[R]): Tensor<R> {\n  return Tensor.make(shape, {dataId: x.dataId}, x.dtype);\n}\n"]}},"hash":"ec9d737afda572e25a092bbfaa9e6035","cacheData":{"env":{}}}