{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1524411533120},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524410852123},{"name":"./tensor","loc":{"line":3,"column":23}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tensor_1 = require(\"./tensor\");\nfunction assertArgumentIsTensor(x, argName, functionName) {\n    assert(x instanceof tensor_1.Tensor, \"Argument '\" + argName + \"' passed to '\" + functionName + \"' must be a Tensor, \" +\n        (\"but got \" + typeof x + \".\"));\n}\nfunction assertArgumentsAreTensors(args, functionName) {\n    var _loop_1 = function (argName) {\n        var arg = args[argName];\n        if (Array.isArray(arg)) {\n            arg.forEach(function (t, i) {\n                assertArgumentIsTensor(t, argName + \"[\" + i + \"]\", functionName);\n            });\n        }\n        else {\n            assertArgumentIsTensor(arg, argName, functionName);\n        }\n    };\n    for (var argName in args) {\n        _loop_1(argName);\n    }\n}\nexports.assertArgumentsAreTensors = assertArgumentsAreTensors;\nfunction shuffle(array) {\n    var counter = array.length;\n    var temp = 0;\n    var index = 0;\n    while (counter > 0) {\n        index = (Math.random() * counter) | 0;\n        counter--;\n        temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n}\nexports.shuffle = shuffle;\nfunction clamp(min, x, max) {\n    return Math.max(min, Math.min(x, max));\n}\nexports.clamp = clamp;\nfunction randUniform(a, b) {\n    return Math.random() * (b - a) + a;\n}\nexports.randUniform = randUniform;\nfunction distSquared(a, b) {\n    var result = 0;\n    for (var i = 0; i < a.length; i++) {\n        var diff = Number(a[i]) - Number(b[i]);\n        result += diff * diff;\n    }\n    return result;\n}\nexports.distSquared = distSquared;\nfunction assert(expr, msg) {\n    if (!expr) {\n        throw new Error(msg);\n    }\n}\nexports.assert = assert;\nfunction assertShapesMatch(shapeA, shapeB, errorMessagePrefix) {\n    if (errorMessagePrefix === void 0) { errorMessagePrefix = ''; }\n    assert(arraysEqual(shapeA, shapeB), errorMessagePrefix + (\" Shapes \" + shapeA + \" and \" + shapeB + \" must match\"));\n}\nexports.assertShapesMatch = assertShapesMatch;\nfunction assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, \" The dtypes of the first(\" + a.dtype + \") and\" +\n        (\" second(\" + b.dtype + \") input must match\"));\n}\nexports.assertTypesMatch = assertTypesMatch;\nfunction flatten(arr, ret) {\n    if (ret === void 0) { ret = []; }\n    if (Array.isArray(arr)) {\n        for (var i = 0; i < arr.length; ++i) {\n            flatten(arr[i], ret);\n        }\n    }\n    else {\n        ret.push(arr);\n    }\n    return ret;\n}\nexports.flatten = flatten;\nfunction inferShape(val) {\n    if (isTypedArray(val)) {\n        return [val.length];\n    }\n    if (!Array.isArray(val)) {\n        return [];\n    }\n    var shape = [];\n    while (val instanceof Array) {\n        shape.push(val.length);\n        val = val[0];\n    }\n    return shape;\n}\nexports.inferShape = inferShape;\nfunction sizeFromShape(shape) {\n    if (shape.length === 0) {\n        return 1;\n    }\n    var size = shape[0];\n    for (var i = 1; i < shape.length; i++) {\n        size *= shape[i];\n    }\n    return size;\n}\nexports.sizeFromShape = sizeFromShape;\nfunction isScalarShape(shape) {\n    return shape.length === 0;\n}\nexports.isScalarShape = isScalarShape;\nfunction arraysEqual(n1, n2) {\n    if (n1.length !== n2.length) {\n        return false;\n    }\n    for (var i = 0; i < n1.length; i++) {\n        if (n1[i] !== n2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.arraysEqual = arraysEqual;\nfunction isInt(a) {\n    return a % 1 === 0;\n}\nexports.isInt = isInt;\nfunction tanh(x) {\n    if (Math.tanh != null) {\n        return Math.tanh(x);\n    }\n    if (x === Infinity) {\n        return 1;\n    }\n    else if (x === -Infinity) {\n        return -1;\n    }\n    else {\n        var e2x = Math.exp(2 * x);\n        return (e2x - 1) / (e2x + 1);\n    }\n}\nexports.tanh = tanh;\nfunction sizeToSquarishShape(size) {\n    for (var a = Math.floor(Math.sqrt(size)); a > 1; --a) {\n        if (size % a === 0) {\n            return [a, size / a];\n        }\n    }\n    return [1, size];\n}\nexports.sizeToSquarishShape = sizeToSquarishShape;\nfunction createShuffledIndices(n) {\n    var shuffledIndices = new Uint32Array(n);\n    for (var i = 0; i < n; ++i) {\n        shuffledIndices[i] = i;\n    }\n    shuffle(shuffledIndices);\n    return shuffledIndices;\n}\nexports.createShuffledIndices = createShuffledIndices;\nfunction rightPad(a, size) {\n    if (size <= a.length) {\n        return a;\n    }\n    return a + ' '.repeat(size - a.length);\n}\nexports.rightPad = rightPad;\nfunction repeatedTry(checkFn, delayFn, maxCounter) {\n    if (delayFn === void 0) { delayFn = function (counter) { return 0; }; }\n    return new Promise(function (resolve, reject) {\n        var tryCount = 0;\n        var tryFn = function () {\n            if (checkFn()) {\n                resolve();\n                return;\n            }\n            tryCount++;\n            var nextBackoff = delayFn(tryCount);\n            if (maxCounter != null && tryCount >= maxCounter) {\n                reject();\n                return;\n            }\n            setTimeout(tryFn, nextBackoff);\n        };\n        setTimeout(tryFn, 0);\n    });\n}\nexports.repeatedTry = repeatedTry;\nfunction getQueryParams(queryString) {\n    var params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n        var t = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            t[_i - 1] = arguments[_i];\n        }\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nexports.getQueryParams = getQueryParams;\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction inferFromImplicitShape(shape, size) {\n    var shapeProd = 1;\n    var implicitIdx = -1;\n    for (var i = 0; i < shape.length; ++i) {\n        if (shape[i] > 0) {\n            shapeProd *= shape[i];\n        }\n        else if (shape[i] === -1) {\n            if (implicitIdx !== -1) {\n                throw Error(\"Shapes can only have 1 implicit size. \" +\n                    (\"Found - 1 at dim \" + implicitIdx + \" and dim \" + i));\n            }\n            implicitIdx = i;\n        }\n        else if (shape[i] <= 0) {\n            throw Error(\"Shapes can not be <= 0. Found \" + shape[i] + \" at dim \" + i);\n        }\n    }\n    if (implicitIdx === -1) {\n        if (size > 0 && size !== shapeProd) {\n            throw Error(\"Size(\" + size + \") must match the product of shape \" + shape);\n        }\n        return shape;\n    }\n    if (size % shapeProd !== 0) {\n        throw Error(\"The implicit shape can't be a fractional number. \" +\n            (\"Got \" + size + \" / \" + shapeProd));\n    }\n    var newShape = shape.slice();\n    newShape[implicitIdx] = size / shapeProd;\n    return newShape;\n}\nexports.inferFromImplicitShape = inferFromImplicitShape;\nfunction squeezeShape(shape, axis) {\n    var newShape = [];\n    var keptDims = [];\n    var j = 0;\n    for (var i = 0; i < shape.length; ++i) {\n        if (axis != null) {\n            if (axis[j] === i && shape[i] > 1) {\n                throw new Error(\"Can't squeeze axis \" + i + \" since its dim '\" + shape[i] + \"' is not 1\");\n            }\n            if ((axis[j] == null || axis[j] > i) && shape[i] === 1) {\n                newShape.push(shape[i]);\n                keptDims.push(i);\n            }\n            if (axis[j] <= i) {\n                j++;\n            }\n        }\n        if (shape[i] > 1) {\n            newShape.push(shape[i]);\n            keptDims.push(i);\n        }\n    }\n    return { newShape: newShape, keptDims: keptDims };\n}\nexports.squeezeShape = squeezeShape;\nfunction getTypedArrayFromDType(dtype, size) {\n    var values = null;\n    if (dtype == null || dtype === 'float32') {\n        values = new Float32Array(size);\n    }\n    else if (dtype === 'int32') {\n        values = new Int32Array(size);\n    }\n    else if (dtype === 'bool') {\n        values = new Uint8Array(size);\n    }\n    else {\n        throw new Error(\"Unknown data type \" + dtype);\n    }\n    return values;\n}\nexports.getTypedArrayFromDType = getTypedArrayFromDType;\nfunction isTensorInList(tensor, tensorList) {\n    for (var i = 0; i < tensorList.length; i++) {\n        if (tensorList[i].id === tensor.id) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isTensorInList = isTensorInList;\nfunction checkForNaN(vals, dtype, name) {\n    if (dtype !== 'float32') {\n        return;\n    }\n    for (var i = 0; i < vals.length; i++) {\n        if (isNaN(vals[i])) {\n            throw Error(\"The result of the '\" + name + \"' has NaNs.\");\n        }\n    }\n}\nexports.checkForNaN = checkForNaN;\nfunction flattenNameArrayMap(nameArrayMap, keys) {\n    var xs = [];\n    if (nameArrayMap instanceof tensor_1.Tensor) {\n        xs.push(nameArrayMap);\n    }\n    else {\n        var xMap = nameArrayMap;\n        for (var i = 0; i < keys.length; i++) {\n            xs.push(xMap[keys[i]]);\n        }\n    }\n    return xs;\n}\nexports.flattenNameArrayMap = flattenNameArrayMap;\nfunction unflattenToNameArrayMap(keys, flatArrays) {\n    if (keys.length !== flatArrays.length) {\n        throw new Error(\"Cannot unflatten Tensor[], keys and arrays are not of same length.\");\n    }\n    var result = {};\n    for (var i = 0; i < keys.length; i++) {\n        result[keys[i]] = flatArrays[i];\n    }\n    return result;\n}\nexports.unflattenToNameArrayMap = unflattenToNameArrayMap;\nfunction hasEncodingLoss(oldType, newType) {\n    if (newType === 'float32') {\n        return false;\n    }\n    if (newType === 'int32' && oldType !== 'float32') {\n        return false;\n    }\n    if (newType === 'bool' && oldType === 'bool') {\n        return false;\n    }\n    return true;\n}\nexports.hasEncodingLoss = hasEncodingLoss;\nfunction copyTypedArray(array, dtype) {\n    if (dtype == null || dtype === 'float32') {\n        return new Float32Array(array);\n    }\n    else if (dtype === 'int32') {\n        return new Int32Array(array);\n    }\n    else if (dtype === 'bool') {\n        var bool = new Uint8Array(array.length);\n        for (var i = 0; i < bool.length; ++i) {\n            if (Math.round(array[i]) !== 0) {\n                bool[i] = 1;\n            }\n        }\n        return bool;\n    }\n    else {\n        throw new Error(\"Unknown data type \" + dtype);\n    }\n}\nexports.copyTypedArray = copyTypedArray;\nfunction isTypedArray(a) {\n    return a instanceof Float32Array || a instanceof Int32Array ||\n        a instanceof Uint8Array;\n}\nexports.isTypedArray = isTypedArray;\nfunction bytesPerElement(dtype) {\n    if (dtype === 'float32' || dtype === 'int32') {\n        return 4;\n    }\n    else if (dtype === 'bool') {\n        return 1;\n    }\n    else {\n        throw new Error(\"Unknown dtype \" + dtype);\n    }\n}\nexports.bytesPerElement = bytesPerElement;\nfunction isFunction(f) {\n    return !!(f && f.constructor && f.call && f.apply);\n}\nexports.isFunction = isFunction;\nfunction extractTensorsFromContainer(result) {\n    return extractTensorsFromAny(result);\n}\nexports.extractTensorsFromContainer = extractTensorsFromContainer;\nfunction extractTensorsFromAny(result) {\n    if (result == null) {\n        return [];\n    }\n    if (result instanceof tensor_1.Tensor) {\n        return [result];\n    }\n    var list = [];\n    var resultObj = result;\n    if (!isIterable(resultObj)) {\n        return [];\n    }\n    for (var k in resultObj) {\n        var sublist = flatten(resultObj[k]).filter(function (x) { return x instanceof tensor_1.Tensor; });\n        list.push.apply(list, sublist);\n    }\n    return list;\n}\nexports.extractTensorsFromAny = extractTensorsFromAny;\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n","map":{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from './tensor';\n// tslint:disable-next-line:max-line-length\nimport {DataType, DataTypeMap, FlatVector, NamedTensorMap, RecursiveArray, RegularArray, TensorContainer, TypedArray} from './types';\n\nfunction assertArgumentIsTensor(\n    x: Tensor, argName: string, functionName: string) {\n  assert(\n      x instanceof Tensor,\n      `Argument '${argName}' passed to '${functionName}' must be a Tensor, ` +\n          `but got ${typeof x}.`);\n}\n\nexport function assertArgumentsAreTensors(\n    args: {[argName: string]: Tensor|Tensor[]}, functionName: string) {\n  for (const argName in args) {\n    const arg = args[argName];\n    if (Array.isArray(arg)) {\n      arg.forEach((t, i) => {\n        assertArgumentIsTensor(t, `${argName}[${i}]`, functionName);\n      });\n    } else {\n      assertArgumentIsTensor(arg, argName, functionName);\n    }\n  }\n}\n\n/** Shuffles the array using Fisher-Yates algorithm. */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let temp = 0;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\n/** Returns a sample from a uniform [a, b] distribution. */\nexport function randUniform(a: number, b: number) {\n  return Math.random() * (b - a) + a;\n}\n\n/** Returns squared eucledian distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\nexport function assert(expr: boolean, msg: string) {\n  if (!expr) {\n    throw new Error(msg);\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertTypesMatch(a: Tensor, b: Tensor): void {\n  assert(\n      a.dtype === b.dtype,\n      ` The dtypes of the first(${a.dtype}) and` +\n          ` second(${b.dtype}) input must match`);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\nexport function flatten<T extends number|boolean|Tensor|Promise<number>>(\n    arr: T|RecursiveArray<T>, ret: T[] = []): T[] {\n  if (Array.isArray(arr)) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], ret);\n    }\n  } else {\n    ret.push(arr as T);\n  }\n  return ret;\n}\n\nexport function inferShape(val: TypedArray|number|boolean|RegularArray<number>|\n                           RegularArray<boolean>): number[] {\n  if (isTypedArray(val)) {\n    return [(val as TypedArray).length];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n  while (val instanceof Array) {\n    shape.push(val.length);\n    val = val[0];\n  }\n  return shape;\n}\n\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  for (let a = Math.floor(Math.sqrt(size)); a > 1; --a) {\n    if (size % a === 0) {\n      return [a, size / a];\n    }\n  }\n  return [1, size];\n}\n\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    setTimeout(tryFn, 0);\n  });\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] > 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found - 1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] <= 0) {\n      throw Error(`Shapes can not be <= 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axis != null) {\n      if (axis[j] === i && shape[i] > 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axis[j] == null || axis[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axis[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] > 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values;\n}\n\nexport function isTensorInList(tensor: Tensor, tensorList: Tensor[]): boolean {\n  for (let i = 0; i < tensorList.length; i++) {\n    if (tensorList[i].id === tensor.id) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport function checkForNaN<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, name: string): void {\n  if (dtype !== 'float32') {\n    // NaN is a floating point concept.\n    return;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    if (isNaN(vals[i])) {\n      throw Error(`The result of the '${name}' has NaNs.`);\n    }\n  }\n}\n\nexport function flattenNameArrayMap(\n    nameArrayMap: Tensor|NamedTensorMap, keys?: string[]): Tensor[] {\n  const xs: Tensor[] = [];\n  if (nameArrayMap instanceof Tensor) {\n    xs.push(nameArrayMap);\n  } else {\n    const xMap = nameArrayMap as {[xName: string]: Tensor};\n    for (let i = 0; i < keys.length; i++) {\n      xs.push(xMap[keys[i]]);\n    }\n  }\n  return xs;\n}\n\nexport function unflattenToNameArrayMap(\n    keys: string[], flatArrays: Tensor[]): NamedTensorMap {\n  if (keys.length !== flatArrays.length) {\n    throw new Error(\n        `Cannot unflatten Tensor[], keys and arrays are not of same length.`);\n  }\n  const result: NamedTensorMap = {};\n  for (let i = 0; i < keys.length; i++) {\n    result[keys[i]] = flatArrays[i];\n  }\n  return result;\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'float32') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function copyTypedArray<D extends DataType>(\n    array: DataTypeMap[D]|number[]|boolean[], dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32') {\n    return new Float32Array(array as number[]);\n  } else if (dtype === 'int32') {\n    return new Int32Array(array as number[]);\n  } else if (dtype === 'bool') {\n    const bool = new Uint8Array(array.length);\n    for (let i = 0; i < bool.length; ++i) {\n      if (Math.round(array[i] as number) !== 0) {\n        bool[i] = 1;\n      }\n    }\n    return bool;\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function isTypedArray(a: TypedArray|number|boolean|RegularArray<number>|\n                             RegularArray<boolean>): boolean {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function extractTensorsFromContainer(result: TensorContainer): Tensor[] {\n  return extractTensorsFromAny(result);\n}\n\n/**\n * Extracts any `Tensor`s found within the provided object up to depth 1.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`.  In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object.  If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned.  If the argument directly contains `Tensor`s, a list of them\n *   will be returned.  `Tensor`s nested more deeply within the argument will\n *   however not be found.  If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\n// tslint:disable-next-line:no-any\nexport function extractTensorsFromAny(result: any): Tensor[] {\n  if (result == null) {\n    return [];\n  }\n  if (result instanceof Tensor) {\n    return [result];\n  }\n\n  const list: Tensor[] = [];\n  // tslint:disable-next-line:no-any\n  const resultObj = result as {[key: string]: any};\n  if (!isIterable(resultObj)) {\n    return [];\n  }\n\n  // Iteration over keys works also for arrays.\n  for (const k in resultObj) {\n    const sublist = flatten(resultObj[k]).filter(x => x instanceof Tensor);\n    list.push(...sublist);\n  }\n  return list;\n}\n\n// tslint:disable-next-line:no-any\nfunction isIterable(obj: any): boolean {\n  return Array.isArray(obj) || typeof obj === 'object';\n}\n"]}},"hash":"5f1d97facbc78aba0fba8e50abece334","cacheData":{"env":{}}}