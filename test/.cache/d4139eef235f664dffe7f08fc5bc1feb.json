{"dependencies":[{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/package.json","includedInParent":true,"mtime":1524411533120},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/test/.babelrc","includedInParent":true,"mtime":1524411533119},{"name":"/Users/nsthorat/Code/deeplearnjs-clients/float16/tfjs-core/tsconfig.json","includedInParent":true,"mtime":1524410852123},{"name":"../environment","loc":{"line":13,"column":28}},{"name":"../globals","loc":{"line":14,"column":24}},{"name":"../ops/ops","loc":{"line":15,"column":20}},{"name":"./optimizer","loc":{"line":16,"column":26}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar environment_1 = require(\"../environment\");\nvar globals_1 = require(\"../globals\");\nvar ops_1 = require(\"../ops/ops\");\nvar optimizer_1 = require(\"./optimizer\");\nvar AdamaxOptimizer = (function (_super) {\n    __extends(AdamaxOptimizer, _super);\n    function AdamaxOptimizer(learningRate, beta1, beta2, epsilon, decay) {\n        if (epsilon === void 0) { epsilon = 1e-8; }\n        if (decay === void 0) { decay = 0.0; }\n        var _this = _super.call(this) || this;\n        _this.learningRate = learningRate;\n        _this.accumulatedFirstMoment = {};\n        _this.accumulatedWeightedInfNorm = {};\n        _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n        _this.eps = globals_1.keep(ops_1.scalar(epsilon));\n        _this.beta1 = globals_1.keep(ops_1.scalar(beta1));\n        _this.beta2 = globals_1.keep(ops_1.scalar(beta2));\n        _this.decay = globals_1.keep(ops_1.scalar(decay));\n        globals_1.tidy(function () {\n            _this.iteration = ops_1.scalar(0).variable();\n            _this.accBeta1 = ops_1.scalar(beta1).variable();\n        });\n        _this.oneMinusBeta1 = globals_1.keep(ops_1.scalar(1 - beta1));\n        _this.one = globals_1.keep(ops_1.scalar(1));\n        return _this;\n    }\n    AdamaxOptimizer.prototype.applyGradients = function (variableGradients) {\n        var _this = this;\n        globals_1.tidy(function () {\n            var oneMinusAccBeta1 = _this.one.sub(_this.accBeta1);\n            var lr = _this.c.div(_this.one.add(_this.decay.mul(_this.iteration)));\n            for (var variableName in variableGradients) {\n                var value = environment_1.ENV.engine.registeredVariables[variableName];\n                if (_this.accumulatedFirstMoment[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedFirstMoment[variableName] =\n                        ops_1.zerosLike(value).variable(trainable);\n                }\n                if (_this.accumulatedWeightedInfNorm[variableName] == null) {\n                    var trainable = false;\n                    _this.accumulatedWeightedInfNorm[variableName] =\n                        ops_1.zerosLike(value).variable(trainable);\n                }\n                var gradient = variableGradients[variableName];\n                var firstMoment = _this.accumulatedFirstMoment[variableName];\n                var weightedInfNorm = _this.accumulatedWeightedInfNorm[variableName];\n                var newFirstMoment = _this.beta1.mul(firstMoment).add(_this.oneMinusBeta1.mul(gradient));\n                var ut0 = _this.beta2.mul(weightedInfNorm);\n                var ut1 = gradient.abs();\n                var newWeightedInfNorm = ut0.maximum(ut1);\n                _this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n                _this.accumulatedWeightedInfNorm[variableName].assign(newWeightedInfNorm);\n                var newValue = lr.div(oneMinusAccBeta1)\n                    .mul(newFirstMoment.div(_this.eps.add(newWeightedInfNorm)))\n                    .add(value);\n                value.assign(newValue);\n            }\n            _this.iteration.assign(_this.iteration.add(_this.one));\n            _this.accBeta1.assign(_this.accBeta1.mul(_this.beta1));\n        });\n    };\n    AdamaxOptimizer.prototype.dispose = function () {\n        var _this = this;\n        this.c.dispose();\n        this.eps.dispose();\n        this.accBeta1.dispose();\n        this.beta1.dispose();\n        this.beta2.dispose();\n        this.oneMinusBeta1.dispose();\n        this.decay.dispose();\n        this.iteration.dispose();\n        this.one.dispose();\n        if (this.accumulatedFirstMoment != null) {\n            Object.keys(this.accumulatedFirstMoment)\n                .forEach(function (name) { return _this.accumulatedFirstMoment[name].dispose(); });\n        }\n        if (this.accumulatedWeightedInfNorm != null) {\n            Object.keys(this.accumulatedWeightedInfNorm)\n                .forEach(function (name) { return _this.accumulatedWeightedInfNorm[name].dispose(); });\n        }\n    };\n    return AdamaxOptimizer;\n}(optimizer_1.Optimizer));\nexports.AdamaxOptimizer = AdamaxOptimizer;\n","map":{"version":3,"file":"adamax_optimizer.js","sourceRoot":"","sources":["../src/optimizers/adamax_optimizer.ts"],"names":[],"mappings":"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","sourcesContent":["ï»¿/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENV} from '../environment';\nimport {keep, tidy} from '../globals';\nimport {scalar, zerosLike} from '../ops/ops';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedVariableMap} from '../types';\nimport {Optimizer} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  private c: Scalar;\n  private eps: Scalar;\n  private accBeta1: Variable;\n  private beta1: Scalar;\n  private beta2: Scalar;\n  private decay: Scalar;\n  private oneMinusBeta1: Scalar;\n  private one: Scalar;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: NamedVariableMap = {};\n  private accumulatedWeightedInfNorm: NamedVariableMap = {};\n\n  constructor(\n      protected learningRate: number, beta1: number, beta2: number,\n      epsilon = 1e-8, decay = 0.0) {\n    super();\n    this.c = keep(scalar(-learningRate));\n    this.eps = keep(scalar(epsilon));\n    // b1, b2 keep initial value of beta* hyperparameters.\n    this.beta1 = keep(scalar(beta1));\n    this.beta2 = keep(scalar(beta2));\n\n    this.decay = keep(scalar(decay));\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    this.oneMinusBeta1 = keep(scalar(1 - beta1));\n    this.one = keep(scalar(1));\n  }\n\n  applyGradients(variableGradients: NamedVariableMap) {\n    tidy(() => {\n      const oneMinusAccBeta1 = this.one.sub(this.accBeta1);\n      const lr = this.c.div(this.one.add(this.decay.mul(this.iteration)));\n\n      for (const variableName in variableGradients) {\n        const value = ENV.engine.registeredVariables[variableName];\n        if (this.accumulatedFirstMoment[variableName] == null) {\n          const trainable = false;\n          this.accumulatedFirstMoment[variableName] =\n              zerosLike(value).variable(trainable);\n        }\n        if (this.accumulatedWeightedInfNorm[variableName] == null) {\n          const trainable = false;\n          this.accumulatedWeightedInfNorm[variableName] =\n              zerosLike(value).variable(trainable);\n        }\n\n        const gradient = variableGradients[variableName];\n        const firstMoment = this.accumulatedFirstMoment[variableName];\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[variableName];\n\n        const newFirstMoment =\n            this.beta1.mul(firstMoment).add(this.oneMinusBeta1.mul(gradient));\n\n        const ut0 = this.beta2.mul(weightedInfNorm);\n        const ut1 = gradient.abs();\n\n        const newWeightedInfNorm = ut0.maximum(ut1);\n\n        this.accumulatedFirstMoment[variableName].assign(newFirstMoment);\n        this.accumulatedWeightedInfNorm[variableName].assign(\n            newWeightedInfNorm);\n\n        const newValue =\n            lr.div(oneMinusAccBeta1)\n                .mul(newFirstMoment.div(this.eps.add(newWeightedInfNorm)))\n                .add(value);\n\n        value.assign(newValue);\n      }\n\n      this.iteration.assign(this.iteration.add(this.one));\n      this.accBeta1.assign(this.accBeta1.mul(this.beta1));\n    });\n  }\n\n  dispose() {\n    this.c.dispose();\n    this.eps.dispose();\n    this.accBeta1.dispose();\n    this.beta1.dispose();\n    this.beta2.dispose();\n    this.oneMinusBeta1.dispose();\n\n    this.decay.dispose();\n    this.iteration.dispose();\n\n    this.one.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      Object.keys(this.accumulatedFirstMoment)\n          .forEach(name => this.accumulatedFirstMoment[name].dispose());\n    }\n\n    if (this.accumulatedWeightedInfNorm != null) {\n      Object.keys(this.accumulatedWeightedInfNorm)\n          .forEach(name => this.accumulatedWeightedInfNorm[name].dispose());\n    }\n  }\n}\n"]}},"hash":"d9f5103bcb8f0f4219c435c0d916af06","cacheData":{"env":{}}}